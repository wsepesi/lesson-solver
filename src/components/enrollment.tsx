"use client";

/* eslint-disable @typescript-eslint/no-misused-promises */
import * as z from 'zod';

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/XChuqWMY264
 */
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "src/components/ui/card"
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import type { OnboardingState, RouterSchema } from '@/app/enroll/page';
import { useEffect, useState } from 'react';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { useToast } from '@/components/ui/use-toast';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { createClient } from '@/utils/supabase/client';
import { type StudioSchema } from 'lib/db-types';

const formSchema = z.object({
    first_name: z.string().trim().min(1).max(50),
    last_name: z.string().trim().min(1).max(50),
    email: z.string().trim().email(),
    studioCode: z.string().trim().min(5).max(5)
});

export type FormSchema = z.infer<typeof formSchema>;

type Props = {
    query: RouterSchema | undefined,
    setFormData: (data: FormSchema) => void,
    setState: (state: OnboardingState) => void,
    setStudio: (studio: StudioSchema) => void,
    studio: StudioSchema | null
}

export function Enrollment(props: Props) {
  const sb = createClient();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const code = props.query ? props.query.code : "";

  const form = useForm<FormSchema>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      first_name: "",
      last_name: "",
      email: "",
      studioCode: code ?? "", // Initialize with code from query params
    },
  });

  useEffect(() => {
    if (code) {
      form.setValue("studioCode", code);
    }
  }, [code, form]);

  const onSubmit = async (data: FormSchema) => {
    setLoading(true);
    props.setFormData(data);
    
    try {
      const codeRes = await sb.from("studios").select("*").eq("code", data.studioCode);
      console.log(codeRes);
      
      if (codeRes.error) {
        toast({
          variant: "destructive",
          title: "Database error",
          description: "Unable to verify studio code. Please try again."
        });
        console.log(codeRes.error);
        setLoading(false);
        return;
      }
      
      const resdata = codeRes.data;
      if (resdata.length === 0) {
        toast({
          variant: "destructive",
          title: "Invalid studio code",
          description: "No studio found with that code. Please check and try again."
        });
        setLoading(false);
        return;
      }

      // Success! Studio found
      toast({
        title: "Studio found!",
        description: `Enrolling in ${(resdata[0] as StudioSchema).studio_name}...`
      });
      
      props.setState("schedule");
      props.setStudio(resdata[0] as StudioSchema);
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Unexpected error",
        description: "Something went wrong. Please try again."
      });
      console.error(error);
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="text-center">Enroll in a Studio</CardTitle>
          <CardDescription className="text-center">
            Enter your name, email and studio code to enroll.
          </CardDescription>
        </CardHeader>
        <CardContent className="">
          <Form {...form}>
            <form className="space-y-4" onSubmit={form.handleSubmit(onSubmit)}>
              <FormField
                control={form.control}
                name="first_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>First Name</FormLabel>
                    <FormControl>
                      <Input placeholder="First" disabled={loading} {...field} />
                    </FormControl>
                    {/* <FormDescription>
                      Your full name as you would like it to appear to the studio.
                    </FormDescription> */}
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Last" disabled={loading} {...field} />
                  </FormControl>
                  <FormDescription>
                    Your full name as you would like it to appear to the studio.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="name@gmail.com" disabled={loading} {...field} />
                    </FormControl>
                    <FormDescription>
                      Your email to save for future communication.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
                />
                <FormField
                control={form.control}
                name="studioCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Studio Code</FormLabel>
                    <FormControl>
                      <Input placeholder="12345" disabled={loading} {...field} />
                    </FormControl>
                    <FormDescription>
                      The 5 digit studio code sent to you by your teacher.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
                />
              <Button className="w-full min-h-[40px]" type="submit" disabled={loading}>
                {loading ? <LoadingSpinner size="sm" /> : "Enroll"}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}
