/* eslint-disable @typescript-eslint/no-misused-promises */
import * as z from 'zod';

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/XChuqWMY264
 */
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "src/components/ui/card"
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '~/components/ui/form';
import type { OnboardingState, RouterSchema } from '~/pages/enroll';
import { useEffect, useState } from 'react';

import { Button } from '~/components/ui/button';
import { Input } from '~/components/ui/input';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useSupabaseClient } from '@supabase/auth-helpers-react';
import { type StudioSchema } from 'lib/schema';

const formSchema = z.object({
    first_name: z.string().min(1).max(50),
    last_name: z.string().min(1).max(50),
    email: z.string().email(),
    studioCode: z.string().min(5).max(5)
});

export type FormSchema = z.infer<typeof formSchema>;

type Props = {
    query: RouterSchema | undefined,
    setFormData: (data: FormSchema) => void,
    setState: (state: OnboardingState) => void,
    setStudio: (studio: StudioSchema) => void,
    studio: StudioSchema | null
}

export function Enrollment(props: Props) { // TODO: fix code autopopulation
  const sb = useSupabaseClient();
  const code = props.query ? props.query.code : "";

  const [defaultCode, setDefaultCode] = useState<string>("");

  useEffect(() => {
    if (code) {
      setDefaultCode(code);
    }
  }, [code]);

  const form = useForm<FormSchema>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      first_name: "",
      last_name: "",
      email: "",
      studioCode: code,
    },
  });

  const onSubmit = async (data: FormSchema) => {
    props.setFormData(data);
    // get studio from code, if it exists. throw an alert if it doesn't
    // first check if the code is valid
    // console.log(data.studioCode)
    const codeRes = await sb.from("studios").select("*").eq("code", data.studioCode);
    console.log(codeRes)
    if (codeRes.error) {
      alert("error with fetching the studio code");
      console.log(codeRes.error);
      return;
    } else {
      const resdata = codeRes.data;
      if (resdata.length === 0) {
        alert("Invalid code, please check that it's correct"); //FIXME:
        return;
      }

      const res = await sb.from("studios").select("*").eq("code", data.studioCode)
      if (res.error) {
        alert("error with fetching the studio code")
        console.log(res.error)
        return
    } else {
      props.setState("schedule");
      props.setStudio(res.data[0] as StudioSchema)
    }
    }
    
  };
  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="text-center">Enroll in a Studio</CardTitle>
          <CardDescription className="text-center">
            Enter your name, email and studio code to enroll.
          </CardDescription>
        </CardHeader>
        <CardContent className="">
          <Form {...form}>
            <form className="space-y-4" onSubmit={form.handleSubmit(onSubmit)}>
              <FormField
                control={form.control}
                name="first_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>First Name</FormLabel>
                    <FormControl>
                      <Input placeholder="First" {...field} />
                    </FormControl>
                    {/* <FormDescription>
                      Your full name as you would like it to appear to the studio.
                    </FormDescription> */}
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Last" {...field} />
                  </FormControl>
                  <FormDescription>
                    Your full name as you would like it to appear to the studio.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="name@gmail.com" {...field} />
                    </FormControl>
                    <FormDescription>
                      Your email to save for future communication.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
                />
                <FormField
                control={form.control}
                name="studioCode"
                defaultValue={defaultCode}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Studio Code</FormLabel>
                    <FormControl>
                      <Input placeholder="12345" {...field} />
                    </FormControl>
                    <FormDescription>
                      The 5 digit studio code sent to you by your teacher.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
                />
              <Button className="w-full" type="submit">
                Go
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}
