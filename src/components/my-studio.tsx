import { Dialog, DialogTrigger } from "./ui/dialog"

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/1frRkxHriYN
 */
import { Badge } from "src/components/ui/badge"
import { Button } from "src/components/ui/button"
import { Days } from "lib/utils"
import ManualScheduleDialog from "./ManualScheduleDialog"
import { Progress } from "./ui/progress"
import SendToStudentsDialog from "./SendToStudentsDialog"
import SetAvailabilityDialog from "./SetAvailabilityDialog"
import SolveScheduleDialog from "./SolveScheduleDialog"
import type { StudioInfo } from "lib/types"
import { Task } from "./Task"
import type { demoStudent } from "~/pages/studios/[slug]"
import { useState } from "react"

type Props = {
  name: StudioInfo["name"],
  students: demoStudent[],
}

type Task = {
  name: string,
  dialogComponent: React.ReactNode,
}

const AVAILABILITY = 0
const SEND_CODE = 1
const CREATE_SCHEDULE = 2
const isPaid = true

const minutes = 30
const dayLength: number = 12 * 60
const blocks = dayLength / (minutes)

export function MyStudio(props: Props) {
  // TODO: populate this from DB on boot
  const [taskStatus, setTaskStatus] = useState<boolean[]>([false, false, false])
  const [taskOpen, setTaskOpen] = useState<boolean[]>([false, false, false])
  const [editAvailability, setEditAvailability] = useState<boolean>(false)

  const [myAvailability, setMyAvailability] = useState<boolean[][]>(
    Array.from({ length: Days.length }, () => 
        Array.from({ length: blocks }, () => false)
    )
  )

  const handleAvailabilitySubmit = () => {
    setTaskStatus(taskStatus.map((status, i) => AVAILABILITY === i ? true : status))
    setTaskOpen(taskOpen.map((status, i) => AVAILABILITY === i ? false : status))
  }

  const handleEditAvailability = () => {
    setEditAvailability(false)
  }

  const tasks: Task[] = [
    {
      name: "Set your availability",
      dialogComponent: <SetAvailabilityDialog 
        handleSubmit={handleAvailabilitySubmit}
        myAvailability={myAvailability}
        setMyAvailability={setMyAvailability}
      />
    },
    {
      name: "Send out code to students",
      dialogComponent: <SendToStudentsDialog 
        taskStatus={taskStatus} 
        setTaskStatus={setTaskStatus}
        taskIdx={SEND_CODE}
        setOpen={(input: boolean) => {
          setTaskOpen(taskOpen.map((status, i) => SEND_CODE === i ? input : status))
        }}
        />
    },
    {
      name: "Create your schedule",
      dialogComponent: <SolveScheduleDialog />
    },
  ]

  return (
    <main className="w-full h-full py-1 px-4 md:py-1 md:px-8">
      <section className="mt-12 mb-12">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold">Progress</h2>
          <Badge>{taskStatus.reduce((acc, curr) => acc + (curr ? 1 : 0), 0)}/3</Badge>
        </div>
         <Progress className="mt-2" value={
        (taskStatus.reduce((acc, curr) => acc + (curr ? 1 : 0), 0) / taskStatus.length) * 100
      }/>
      </section>
     
      <header className="mb-8">
        <h1 className="text-4xl font-bold tracking-tight">{props.name}</h1>
      </header>
      <div className="flex space-x-10">
        <section className="space-y-6 w-2/3">
          {tasks.map((task, i) => (
            <Task
              key={i}
              taskStatus={taskStatus}
              task={task.name}
              i={i}
              setTaskStatus={setTaskStatus}
              open={taskOpen[i]!}
              setOpen={(input: boolean) => {
                setTaskOpen(taskOpen.map((status, j) => i === j ? input : status))
              }}
            >
              {task.dialogComponent}
            </Task>
          ))}
        </section>
        <aside className="w-1/3 space-y-6">
          <section className="bg-gray-100 p-4 rounded-md">
            <div className="flex flex-row w-full mb-4">
              <h2 className="text-xl font-bold w-full">Enrolled Students</h2>
              <p className="text-right w-full">{props.students.length} / {isPaid ? 50 : 5} students</p>
              {/* TODO: add a tooltip to explain the limit if the user isnt premium */}
            </div>
            <ul className="space-y-2 flex flex-col">
              {props.students.map((student) => (
                <li key={student.name} className="flex flex-row w-full justify-between">
                  <p className="font-mono">{student.name}, {student.email}</p>
                  <Badge 
                  className={`w-[6.5vw] flex flex-row justify-center mx-4 
                  ${student.progress === "Completed" && "bg-emerald-600"}
                  ${student.progress === "In Progress" && "bg-yellow-500"}
                  `}
                  >{student.progress}</Badge>
                </li>
              ))} 
            </ul>
          </section>
          <section className="bg-gray-100 p-4 rounded-md">
            <h2 className="text-xl font-bold mb-4">Admin Tasks</h2>
            <div className="space-y-2">
              <ManualScheduleDialog />
              {taskStatus[AVAILABILITY] && 
              // <Button className="w-full">Edit Your Availability</Button>
              <Dialog open={editAvailability} onOpenChange={setEditAvailability}>
                <DialogTrigger asChild>
                  <Button className="w-full">Edit Your Availability</Button>
                </DialogTrigger>
                <SetAvailabilityDialog 
                  handleSubmit={handleEditAvailability}
                  myAvailability={myAvailability}
                  setMyAvailability={setMyAvailability}
                />
              </Dialog>
              }
              <Button className="w-full">Manage Studio</Button>
            </div>
          </section>
        </aside>
      </div>
    </main>
  )
}
