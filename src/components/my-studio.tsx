"use client";

/* eslint-disable @typescript-eslint/no-misused-promises */
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "./ui/alert-dialog"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog"


/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/1frRkxHriYN
 */
import { Badge } from "src/components/ui/badge"
import { Button } from "src/components/ui/button"
import { Cross1Icon } from "@radix-ui/react-icons"
import { abbrDaytoFull } from "lib/utils"
import ManualScheduleDialog from "./ManualScheduleDialog"
import { Progress } from "./ui/progress"
import SendToStudentsDialog from "./SendToStudentsDialog"
import SetAvailabilityDialog from "./SetAvailabilityDialog"
import SolveScheduleDialog from "./SolveScheduleDialog"
import { Task } from "./Task"
import type { StudioWithStudents } from "@/app/(protected)/studios/[slug]/page"
import { useState } from "react"
import type { StudentSchema } from "lib/db-types"
import { createClient } from "@/utils/supabase/client"
import { useRouter } from "next/navigation"
import { Popover, PopoverContent, PopoverTrigger } from "./ui/popover"
// InteractiveCalendar removed - legacy component deleted
import { useSchedule } from "../hooks/useSchedule"
import { AdaptiveCalendar } from "./scheduling/AdaptiveCalendar"
import { createEmptyWeekSchedule } from "lib/scheduling/utils"
import type { WeekSchedule } from "lib/scheduling/types"
import { convertScheduleToWeekSchedule } from "lib/scheduling-adapter"

// Event type previously from InteractiveCalendar - now defined inline
export interface Event {
  id: string;
  name: string;
  booking: {
    day: string;
    timeInterval: { start: number; duration: number };
  };
  student_id: number;
}

type Props = {
  studio: StudioWithStudents,
  setStudio: (studio: StudioWithStudents) => void,
}

type Task = {
  name: string,
  dialogComponent: React.ReactNode,
}

export const AVAILABILITY = 0
export const SEND_CODE = 1
export const CREATE_SCHEDULE = 2
const isPaid = true

// Legacy grid system variables removed

type Progress = "Not Started" | "In Progress" | "Completed"

export const eventListToEltList = (events: Event[]): React.JSX.Element[] => {
  const res = []
  const daysOfWeekAbbv = ["M", "Tu", "W", "Th", "F", "Sa", "Su"];
  
  // Helper function to convert minutes to time string
  const minutesToTimeString = (minutes: number): string => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}:${mins.toString().padStart(2, '0')}`;
  };
  
  for (let i = 0; i < 7; i++) {
    const day = daysOfWeekAbbv[i]!
    const dayEvents = events.filter(event => event.booking.day === day);
    if (dayEvents.length > 0) {
      res.push(<p key={`${day}-header`} className="font-bold">{abbrDaytoFull(day)}:</p>);
      dayEvents.forEach((event, index) => {
        const startTime = minutesToTimeString(event.booking.timeInterval.start);
        const endTime = minutesToTimeString(event.booking.timeInterval.start + event.booking.timeInterval.duration);
        res.push(<div key={`${day}-${index}`}>{event.name}: {startTime} - {endTime}</div>);
      });
    }
  }
  return res
}

const getStudentProgress = (student: StudentSchema) => {
  return student.schedule === null ?  "Not Started" : "Completed"
}

// Note: Event metadata is now stored directly in TimeBlock.metadata

// Convert Events array to WeekSchedule format for calendar display
const convertEventsToWeekSchedule = (events: Event[]): WeekSchedule => {
  const weekSchedule = createEmptyWeekSchedule()
  const dayAbbrevs = ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa']
  
  events.forEach(event => {
    const dayIndex = dayAbbrevs.indexOf(event.booking.day)
    if (dayIndex >= 0 && weekSchedule.days[dayIndex]) {
      const block = {
        start: event.booking.timeInterval.start,
        duration: event.booking.timeInterval.duration,
        metadata: {
          studentId: event.student_id,
          studentName: event.name,
          eventId: event.id
        }
      }
      
      weekSchedule.days[dayIndex].blocks.push(block)
    }
  })
  
  // Recalculate metadata for each day
  weekSchedule.days.forEach(day => {
    day.metadata = {
      totalAvailable: day.blocks.reduce((sum, block) => sum + block.duration, 0),
      largestBlock: Math.max(...day.blocks.map(block => block.duration), 0),
      fragmentationScore: day.blocks.length > 1 ? day.blocks.length - 1 : 0
    }
  })
  
  return weekSchedule
}

// Convert WeekSchedule back to Events array
const convertWeekScheduleToEvents = (weekSchedule: WeekSchedule): Event[] => {
  const dayAbbrevs = ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa']
  const events: Event[] = []
  
  weekSchedule.days.forEach((day, dayIndex) => {
    day.blocks.forEach(block => {
      // Use embedded metadata instead of the global map
      if (block.metadata) {
        events.push({
          id: block.metadata.eventId,
          name: block.metadata.studentName,
          booking: {
            day: dayAbbrevs[dayIndex]!,
            timeInterval: {
              start: block.start,
              duration: block.duration
            }
          },
          student_id: block.metadata.studentId
        })
      }
    })
  })
  
  return events
}

// Note: isTimeSlotValid function removed - validation now handled in AdaptiveCalendar component


export function MyStudio(props: Props) {
  const supabaseClient = createClient()
  const router = useRouter()

  const { studio, setStudio } = props

  // Use the new TimeBlock-based schedule hook
  const { 
    schedule: weekSchedule, 
    updateSchedule, 
    saving, 
    error: scheduleError,
    saveImmediately 
  } = useSchedule(studio.user_id ?? "")

  // TODO: populate this from DB on boot
  const [taskStatus, setTaskStatus] = useState<boolean[]>([(studio.owner_schedule !== null && studio.owner_schedule !== undefined), studio.students.length !== 0, studio.events !== null])
  
  // Legacy boolean grid availability removed - using WeekSchedule system instead

  // Note: Task status for availability is only updated on actual database saves,
  // not on local schedule changes, to prevent progress counter incrementing prematurely

  // Show error if schedule fails to load
  if (scheduleError) {
    console.error("Schedule loading error:", scheduleError);
  }

  const [taskOpen, setTaskOpen] = useState<boolean[]>([false, false, false])
  const [resolveOpen, setResolveOpen] = useState<boolean>(false)
  const [editAvailability, setEditAvailability] = useState<boolean>(false)

  // Using events directly for schedule display
  const [events, setEvents] = useState<Event[]>((studio.events as Event[]) ?? [])

  const handleSaveSchedule = async () => {
    if (!events) {
      console.log("events is null")
      return
    }
    const res = await supabaseClient.from("studios").update({
      events: events
    }).eq("id", studio.id)

    if (res.error) {
      console.log(res.error)
      alert("error, please try again")
    }

    setStudio({ ...studio, events: events })
  }

  const hasScheduleChanged = JSON.stringify(events) !== JSON.stringify(studio.events)

  // Handle schedule changes from AdaptiveCalendar - validation now handled in calendar component
  const handleScheduleChange = (newSchedule: WeekSchedule) => {
    // Convert back to events - AdaptiveCalendar will handle validation internally
    const newEvents = convertWeekScheduleToEvents(newSchedule)
    setEvents(newEvents)
  }

  const handleAvailabilitySubmit = async () => {
    try {
      // Force immediate save to ensure data is persisted before updating task status
      if (weekSchedule && saveImmediately) {
        await saveImmediately();
        const hasAvailability = weekSchedule.days.some(day => day.blocks.length > 0);
        setTaskStatus(taskStatus.map((status, i) => AVAILABILITY === i ? hasAvailability : status))
      }
      setTaskOpen(taskOpen.map((status, i) => AVAILABILITY === i ? false : status))
    } catch (error) {
      console.error("Error saving availability:", error)
      alert("Error saving availability, please try again")
    }
  }

  const handleStudentDelete = async (student: StudentSchema) => {
    const res = await supabaseClient.from("students").delete().eq("id", student.id)

    if (res.error) {
      console.log(res.error)
      alert("error, please try again")
    }

    const newStudents = studio.students.filter((s) => s.id !== student.id)
    const newStudio = { ...studio, students: newStudents }
    props.setStudio(newStudio)
  }

  const handleEditAvailability = async () => {
    try {
      // Force immediate save to ensure data is persisted before updating task status
      if (weekSchedule && saveImmediately) {
        await saveImmediately();
        
        // Update task status based on whether schedule has availability blocks
        const hasAvailability = weekSchedule.days.some(day => day.blocks.length > 0);
        setTaskStatus(taskStatus.map((status, i) => AVAILABILITY === i ? hasAvailability : status))
      }
      setEditAvailability(false)
    } catch (error) {
      console.error("Error updating availability:", error)
      alert("Error updating availability, please try again")
    }
  }

  const tasks: Task[] = [
    {
      name: "Set your availability",
      dialogComponent: <SetAvailabilityDialog 
        handleSubmit={handleAvailabilitySubmit}
        schedule={weekSchedule}
        onScheduleChange={updateSchedule}
        saving={saving}
      />
    },
    {
      name: "Send out code to students",
      dialogComponent: <SendToStudentsDialog 
        taskStatus={taskStatus} 
        setTaskStatus={setTaskStatus}
        taskIdx={SEND_CODE}
        setOpen={(input: boolean) => {
          setTaskOpen(taskOpen.map((status, i) => SEND_CODE === i ? input : status))
        }}
        studio={studio}
        />
    },
    {
      name: "Create your schedule",
      dialogComponent: <SolveScheduleDialog 
        studio={studio}
        setTaskStatus={setTaskStatus}
        taskStatus={taskStatus}
        taskIdx={CREATE_SCHEDULE}
        setStudio={setStudio}
        setEvents={setEvents}
      />
    },
  ]

  const handleStudioDelete = async () => {
    
    const res = await supabaseClient.from("studios").delete().eq("id", studio.id)

    if (res.error) {
      console.log(res.error)
      alert("error, please try again")
    }

    router.push("/studios")
  }

  const isDoneWithTasks = taskStatus.every((status) => status)

  return (
    <main className="w-full h-full py-1 px-4 md:py-1 md:px-8">
      {!isDoneWithTasks && (
        <section className="mt-4 mb-2">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Progress</h2>
            <Badge>{taskStatus.reduce((acc, curr) => acc + (curr ? 1 : 0), 0)}/3</Badge>
          </div>
          <Progress className="mt-2" value={
          (taskStatus.reduce((acc, curr) => acc + (curr ? 1 : 0), 0) / taskStatus.length) * 100
        }/>
        </section>)
      }
      <header className="mb-8 flex flex-row items-end justify-between">
        <h1 className="text-4xl font-bold tracking-tight mt-4">{studio.studio_name}</h1>
        <h3 className="text-xl tracking-tight font-light text-gray-500">Studio Code: {studio.code}</h3>
      </header>
      <div className="flex space-x-10">
        {isDoneWithTasks ? 
        ( <>
          <div className="space-y-6 w-2/3">
            {events && events.length > 0 && (() => {
              // Prepare availability data for drag-and-drop hints
              const teacherAvailability = convertScheduleToWeekSchedule(studio.owner_schedule);
              const studentAvailabilities = new Map<string, WeekSchedule>();
              
              // Build map of student availabilities
              studio.students.forEach(student => {
                if (student.schedule) {
                  studentAvailabilities.set(
                    student.id.toString(), 
                    convertScheduleToWeekSchedule(student.schedule)
                  );
                }
              });
              
              return (
                <div className="h-[60vh]">
                  <AdaptiveCalendar 
                    schedule={convertEventsToWeekSchedule(events)}
                    onChange={handleScheduleChange}
                    granularity={15}
                    mode="rearrange"
                    teacherAvailability={teacherAvailability}
                    studentAvailabilities={studentAvailabilities}
                  />
                </div>
              );
            })()}
          </div>
          {events && events.length > 0 && 
          <div className="w-1/4">
            <h3 className="text-lg font-light ">Schedule:</h3>
            <div className="flex flex-col">
                {eventListToEltList(events ?? []).map((elt) => (
                    elt
                ))}
            </div>
            {/* <Button className="mt-4">Download Schedule</Button> */}
            {hasScheduleChanged && 
              <Button 
                className={`mt-4`}
                onClick={handleSaveSchedule}
              >
                Save Changes
              </Button>
            }
          </div>}
          </>
        ) : 
        (<section className="space-y-6 w-2/3">
          {tasks.map((task, i) => (
            <Task
              key={i}
              taskStatus={taskStatus}
              task={task.name}
              i={i}
              setTaskStatus={setTaskStatus}
              open={taskOpen[i]!}
              setOpen={(input: boolean) => {
                setTaskOpen(taskOpen.map((status, j) => i === j ? input : status))
              }}
            >
              {task.dialogComponent}
            </Task>
          ))}
        </section>)}
        <aside className="w-1/3 space-y-6">
          <section className="bg-gray-100 p-4 rounded-md">
            <div className="flex flex-row w-full mb-4">
              <h2 className="text-xl font-bold w-full">Enrolled Students</h2>
              <p className="text-right w-full">{studio.students.length} / {isPaid ? 50 : 5} students</p>
              {/* TODO: add a tooltip to explain the limit if the user isnt premium */}
            </div>
            <ul className="space-y-2 flex flex-col">
              {studio.students.length ? (studio.students.map((student) => {
                const progress = getStudentProgress(student)
                return (
                <li key={student.id} className="flex flex-row w-full justify-between">
                  <div className="flex flex-row justify-start items-center">
                    {/* make sure the border has a thin radius and is a circle */}
                    <div 
                      className="w-5 h-5 cursor-pointer hover:bg-slate-200 flex flex-row items-center p-1 border border-gray-300 rounded-full mr-1"
                      onClick={() => handleStudentDelete(student)}
                    >
                      <Cross1Icon className="" />
                    </div>
                    <Popover>
                      <PopoverTrigger>
                        <p className="font-mono px-1 border rounded-md border-black cursor-pointer self-start text-left">{student.first_name} {student.last_name}, {student.email}</p>
                      </PopoverTrigger>
                      <PopoverContent className="min-w-[20vw]">
                        <div className="p-4">
                          <p className="text-sm text-gray-600">Student schedule view temporarily unavailable</p>
                        </div>
                      </PopoverContent>
                    </Popover>
                  </div>
                  <Badge 
                  className={`min-w-[6.5vw] flex flex-row justify-center ml-4 h-6 self-center
                  ${progress === "Completed" && "bg-emerald-600"}
                  `} // ${progress === "In Progress" && "bg-yellow-500"}
                  >{progress}</Badge>
                </li>
              )})) : <p className="text-center">No students have been invited or enrolled yet!</p>}
            </ul>
          </section>
          <section className="bg-gray-100 p-4 rounded-md">
            <h2 className="text-xl font-bold mb-4">Admin Tasks</h2>
            <div className="space-y-2">
              <Dialog 
                open={taskOpen[SEND_CODE]} 
                onOpenChange={(input: boolean) => {
                  setTaskOpen(taskOpen.map((status, i) => SEND_CODE === i ? input : status))
                }}
              >
                <DialogTrigger asChild>
                  <Button className="w-full">Invite Students</Button>
                </DialogTrigger>
                <SendToStudentsDialog 
                  taskStatus={taskStatus} 
                  setTaskStatus={setTaskStatus}
                  taskIdx={SEND_CODE}
                  setOpen={(input: boolean) => {
                    setTaskOpen(taskOpen.map((status, i) => SEND_CODE === i ? input : status))
                  }}
                  studio={studio}
                />
              </Dialog>
              <ManualScheduleDialog 
                studio={studio}
                setStudio={props.setStudio}
                events={events}
                setEvents={setEvents}
                taskStatus={taskStatus}
                setTaskStatus={setTaskStatus}
              />
              {taskStatus[AVAILABILITY] && 
              <Dialog open={editAvailability} onOpenChange={setEditAvailability}>
                <DialogTrigger asChild>
                  <Button className="w-full">Edit Your Availability</Button>
                </DialogTrigger>
                <SetAvailabilityDialog 
                  handleSubmit={handleEditAvailability}
                  schedule={weekSchedule}
                  onScheduleChange={updateSchedule}
                  saving={saving}
                />
              </Dialog>
              }
              <Dialog>
                <DialogTrigger asChild>
                  <Button className="w-full">Manage Studio</Button>
                </DialogTrigger>
                <DialogContent className="w-[50vw] max-h-[50vh] flex flex-col justify-center items-center">
                  <DialogHeader>
                    <DialogTitle>Manage Studio</DialogTitle>
                    <DialogDescription>
                      Change your studio info, or delete the studio.
                    </DialogDescription>
                  </DialogHeader>
                  {/* <div>
                    <Label>Studio Name</Label>
                    <div className="flex flex-row justify-center items-center">
                      <Input className="w-[20vw]" placeholder="Studio Name" />
                      <Button className="mx-2"><CheckIcon className="w-4 h-4" /></Button>
                    </div>
                  </div> */}
                  {/* <Separator /> */}
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button className="w-[10vw]"variant="destructive">Delete Studio</Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                          This action cannot be undone. This will permanently delete your
                          studio and remove the data from our servers.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={handleStudioDelete}>Continue</AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                </DialogContent>
              </Dialog>
              {taskStatus[CREATE_SCHEDULE] && 
                <Dialog open={resolveOpen} onOpenChange={setResolveOpen}>
                  <DialogTrigger asChild>
                    <Button className="w-full">Re-Solve Schedule</Button>
                  </DialogTrigger>
                  <SolveScheduleDialog 
                    studio={studio}
                    setTaskStatus={setTaskStatus}
                    taskStatus={taskStatus}
                    taskIdx={CREATE_SCHEDULE}
                    setEvents={setEvents}
                    setStudio={setStudio}
                    setResolveOpen={setResolveOpen}
                  />
                </Dialog>
              }
            </div>
          </section>
        </aside>
      </div>
    </main>
  )
}

